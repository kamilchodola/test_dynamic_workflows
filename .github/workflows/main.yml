name: Matrix Job Workflow

on: 
  workflow_dispatch: 
  push: 
    branches: ["main"]

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read the JSON file and create matrix
        id: set-matrix
        run: |
          # Read and set matrix in one line to avoid formatting issues
          jobs=$(jq -c '.' .github/workflows/jobs.json)
          echo "matrix=$jobs" >> $GITHUB_OUTPUT

      - name: Debug Output
        run: |
          echo "Matrix: ${{ steps.set-matrix.outputs.matrix }}"

  dynamic-jobs:
    needs: generate-matrix
    strategy:
      matrix:
        job: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.job.runs_on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pygithub

      - name: Set up GitHub CLI with GITHUB_TOKEN
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Verify dependent job output
        if: ${{ matrix.job.dependencies && matrix.job.dependencies != '' }}
        env:
          DEPENDENCIES_JSON: ${{ toJson(matrix.job.dependencies) }}
        run: python .github/workflows/wait_and_download.py

      - name: Run Job Logic
        run: |
          echo "Running ${{ matrix.job.name }} with input from dependencies"
          ls
          echo "SUCCESS" > output.txt  # Optional, indicating success

      - name: Create FAILURE artifact on error
        if: failure()
        run: echo "FAILURE" > output.txt

      - name: Ensure Artifact Creation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.name }}-output
          path: output.txt
