name: Matrix Job Workflow

on: 
  workflow_dispatch: 
  push: 
    branches: ["main"]

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read the JSON file and create matrix
        id: set-matrix
        run: |
          jobs=$(jq -c '.' .github/workflows/jobs.json)
          echo $jobs
          echo "matrix=$jobs" >> $GITHUB_OUTPUT

  dynamic-jobs:
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        job: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.job.runs_on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pygithub

      - name: Set up GitHub CLI with GITHUB_TOKEN
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Verify dependent job output
        id: verify-job
        if: ${{ matrix.job.dependencies && matrix.job.dependencies != '' }}
        env:
          DEPENDENCIES_JSON: ${{ toJson(matrix.job.dependencies) }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: python .github/workflows/wait_and_download.py

      - name: Run Job Logic
        id: job-logic
        run: |
          echo "Running ${{ matrix.job.name }} with input from dependencies"
          if (( RANDOM % 2 )); then
            echo "Exiting with status 1"
            exit 1
          else
            echo "Exiting with status 0"            
            echo "SUCCESS" > ${{ matrix.job.name }}-status.txt
          fi
          
      - name: Create FAILURE artifact on error
        if: failure()
        run: |
          if [ "${{ steps.verify-job.outcome }}" == "failure" ]; then
            echo "FAILURE-78" > ${{ matrix.job.name }}-status.txt  # Dependent job failed
          elif [ "${{ steps.job-logic.outcome }}" == "failure" ]; then
            echo "FAILURE-1" > ${{ matrix.job.name }}-status.txt   # Job logic failed
          fi

      - name: Ensure Artifact Creation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.name }}-output-${{ github.run_id }}
          path: ${{ matrix.job.name }}-status.txt

  generate-summary:
    if: always()
    needs: dynamic-jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI with GITHUB_TOKEN
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Download all output artifacts from matrix jobs
        run: |
          jobs=$(jq -r '.[].name' .github/workflows/jobs.json)
          mkdir -p artifacts
          for job in $jobs; do
            echo "Downloading artifact for $job"
            gh run download --name "$job-output-${{ github.run_id }}" --dir artifacts/$job || echo "$job artifact not found, skipping"
          done

      - name: Generate Mermaid Diagram from status.txt files
        run: |
          echo "## Job Summary" >> summary.md
          echo "" >> summary.md

          # Mermaid diagram creation
          echo "### Dependency Diagram" >> summary.md
          echo '```mermaid' >> summary.md
          echo "graph TD" >> summary.md

          # Parse jobs from jobs.json
          jobs=$(jq -r '.[].name' .github/workflows/jobs.json)
          for job in $jobs; do
            job_file="artifacts/$job-status.txt"
            ls
            ls artifacts
            echo artifacts/$job-status.txt
            # Check if the status file exists
            if [[ -f "$job_file" ]]; then
              ls $job_file
              cat $job_file
              job_status=$(cat $job_file)
        
              # Assign the correct node label and color class
              if [[ "$job_status" == "FAILURE" ]]; then
                echo "$job[$job - Failed]:::failed" >> summary.md
              elif [[ "$job_status" == "FAILURE-78" ]]; then
                echo "$job[$job - Cancelled]:::cancelled" >> summary.md
              else
                echo "$job[$job - Success]:::success" >> summary.md
              fi
            else
              echo "$job[$job - No Status Found]:::unknown" >> summary.md
            fi

            # Visualize dependencies
            dependencies=$(jq -r --arg job_name "$job" '.[] | select(.name == $job_name) | .dependencies[]?.dependency' .github/workflows/jobs.json)
            for dep in $dependencies; do
              echo "$dep --> $job" >> summary.md
            done
          done

          echo '```' >> summary.md
    
          # Add class definitions for Mermaid diagram
          echo "classDef success fill:#4CAF50,stroke:#333,stroke-width:2px;" >> summary.md
          echo "classDef failed fill:#F44336,stroke:#333,stroke-width:2px;" >> summary.md
          echo "classDef cancelled fill:#FFC107,stroke:#333,stroke-width:2px;" >> summary.md
          echo "classDef unknown fill:#D3D3D3,stroke:#333,stroke-width:2px;" >> summary.md

          # Add the summary to GitHub's special summary markdown file
          cat summary.md >> $GITHUB_STEP_SUMMARY
